#
# Copyright 2016-2017 Blockie AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
_clone:
    @clone: file:1.6.0 string:1.4.0
    @include: file:1.6.0|/_clone/
    @include: string:1.4.0|/_clone/
@include: |/_clone/

_dep_install:
    _info:
        title: Check dependencies for this module.
    _env:
        - RUN: OS_DEP_INSTALL

_info:
    title: OS module
    desc: |
        Handle operating system tasks such as user management, packages and services management.

info:
    _info:
        title: Show information about the OS
    _env:
        - RUN: OS_INFO

harden:
    _info:
        title: Harden the machine
    _env:
        - RUN: OS_HARDEN

userexist:
    _info:
        title: Check if a user exists
    _env:
        - targetuser:
            title: User to check if exists.
        - SPACE_ARGS:
            arguments:
                -
                    title: User
                    values:
                        - user
        - RUN: OS_USER_EXIST -- "${targetuser}"

groupexist:
    _info:
        title: Check if a group exists
    _env:
        - group:
            title: Group name
        - SPACE_ARGS:
            arguments:
                -
                    title: Group
                    values:
                        - group
        - RUN: OS_GROUP_EXIST -- "${group}"

installsudo:
    _info:
        title: Install the 'sudo' pkg
    _env:
        - RUN: OS_INSTALL_PKG -- "sudo"

createuser:
    _info:
        title: Create a new user
    _env:
        - targetuser:
            title: User to create
        - targetuserpubkeyfile:
            title: Public key of the user
            completion: G
        - SPACE_ARGS:
            arguments:
                -
                    title: User
                    values:
                        - user
                -
                    title: Public key file
                    completion: G
        - RUN: OS_CREATE_USER -- "${targetuser}" "${targetuserpubkeyfile}"

creategroup:
    _info:
        title: Create a group in the system
    _env:
        - group:
            title: Group name
        - SPACE_ARGS:
            arguments:
                -
                    title: Group
                    values:
                        - group
        - RUN: OS_ADD_GROUP

mksudo:
    _info:
        title: Make an existing user into sudo
    _env:
        - targetuser:
            title: User to make sudo
        - SPACE_ARGS:
            arguments:
                -
                    title: User
                    values:
                        - user
        - RUN: OS_MKSUDO_USER -- "${targetuser}"

disableroot:
    _info:
        title: Disable root login
        desc: |
            Run this to make it so that the root user no longer can login
            over SSH. This increases the security of the machine.
            Note: make sure the super user has been setup successfully first.
    _env:
        - RUN: OS_DISABLE_ROOT

disableuser:
    _info:
        title: Disable an user account
        desc: |
            Disable a user from logging in.
    _env:
        - targetuserdisable:
            title: User to disable
        - SPACE_ARGS:
            arguments:
                -
                    title: User
                    values:
                        - user
        - RUN: OS_DISABLE_USER -- "${targetuserdisable}"

motd:
    _info:
        title: Create/replace motd file
    _env:
        - motdfile:
            title: Path of motd file to set
            value: ${motdfile:-@{DIR}/motd}
            completion: G
        - SPACE_ARGS:
            arguments:
                -
                    title: motd file
                    completion: G
        - RUN: OS_MOTD -- "${motdfile}"

update:
    _info:
        title: Update the OS package lists
    _env:
        - RUN: OS_UPDATE

reboot:
    _info:
        title: Reboot the system
    _env:
        - RUN: OS_REBOOT

upgrade:
    _info:
        title: Update and upgrade OS
    _env:
        - RUN: OS_UPGRADE

service:
    _info:
        title: Control a service
    _env:
        - service:
            title: Name of service
        - action:
            title: Action
        - SPACE_ARGS:
            arguments:
                -
                    title: Service
                    values:
                        - service
                -
                    title: Action
                    values:
                        - action
        - RUN: OS_SERVICE -- "${service}" "${action}"

shell:
    _info:
        title: Enter into shell
    _env:
        - shell:
            value: ${shell:-sh}
            values:
                - sh
                - bash
        - command:
            title: Command to run in shell
        - SPACE_ARGS:
            arguments:
                -
                    title: Shell
                    values:
                        - sh
                        - bash
                -
                    title: Command
                    values:
                        - command
        - RUN: OS_SHELL -- "${shell}" "${command}"

install:
    _info:
        title: Install any pkg
        desc: |
            Pkg name as positional argument.
            Always provide Debian names.
    _env:
        - pkg:
            title: Package
        - SPACE_ARGS:
            arguments:
                -
                    title: Package
                    values:
                        - package
        - RUN: OS_INSTALL_PKG -- "${pkg}"

security:
    limits:
        set:
            _info:
                title: Update /etc/security/limits.conf
            _env:
                - domain:
                - type:
                - item:
                - value:
                - RUN: OS_SECURITY_LIMITS_SET -- "${domain}" "${type}" "${item}" "${value}"




...
